#include<stdio.h>
#include<stdlib.h>

typedef struct process{
	char name[5];
	int bt;
	int at;
	int prt;
	int wt,ta;
	int flag;
}processes;


void b_sort(processes temp[],int n)
{
	processes t;
	int i,j;
	for(i=1;i<n;i++)
		for(j=0;j<n-i;j++){
			if(temp[j].at > temp[j+1].at){
				t = temp[j];
				temp[j] = temp[j+1];
				temp[j+1] = t;
			}
		}
}

int accept(processes P[]){
	int i,n;
	printf("\n Enter total no. of processes : ");
	scanf("%d",&n);
	for(i=0;i<n;i++){
		printf("\n PROCESS [%d]",i+1);
		printf(" Enter process name : ");
		scanf("%s",&P[i].name);
		printf(" Enter burst time : ");
		scanf("%d",&P[i].bt);
		printf(" Enter arrival time : ");
		scanf("%d",&P[i].at);
		printf(" Enter priority : ");
		scanf("%d",&P[i].prt);
	}
	printf("\n PROC.\tB.T.\tA.T.\tPRIORITY");
	for(i=0;i<n;i++)
		printf("\n %s\t%d\t%d\t%d",P[i].name,P[i].bt,P[i].at,P[i].prt);
	return n;
}

// FCFS Algorithm
void FCFS(processes P[],int n){
	processes temp[10];
	int sumw=0,sumt=0;
	int x = 0;
	float avgwt=0.0,avgta=0.0;
	int i,j;
	for(i=0;i<n;i++)
		temp[i]=P[i];

cpuschedulingall.c  --all cpu scheduling
fcfs.c   --fcfs
multilevelfeedbackqueue.c  
multilevelqueue.c
multilevelqueue2.c
nppriority.c  
ppriority.c
prioritywithdiffatnp.cpp
roundrobin.c 
sjf.c
sjf.cpp
srtf.c
roundrobin2.c 
bankersalgorithm.c
bankersalgorithm1.c
bankersalgorithm2.c
rbankersalgorithm.c
bestfit.c
firstfit.c
worstfit.c
sproducerconsumer.c
sproducerconsumer1.c
sproducerconsumer2.c
sdiningphilospher.c
sreaderwriter.c
sreaderwriter1.c
ssleepingbarber.c
ssleepingbarber1.c
diningphilospher.c
producerconsumer.c
producerconsumer1.c
sleepingbarber.c
sleepingproffeser.c
smokers.c
fifo.cpp
lru.cpp
optimal.cpp
fifo.c
lru.c
optimal.c
pagetable.c
alarm.c
changedirectory.c
cwr.c
exit.c
fork.c
fork1.c
grade.c
grep.c
kill.c
ls.c
name.c
pid.c
sleep.c
sleep1.c
systemcalls.c
wait.c
wait1.c
p1.sh
p2.sh
p3.sh
p4.sh
p5.sh
p6.sh
p7.sh
p8.sh
p9.sh
p10.sh
